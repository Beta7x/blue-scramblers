// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @unique @id @default(uuid())
  email     String    @unique
  name      String    @db.VarChar(100)
  role      Role      @default(USER)
  phone     String    @db.VarChar(15)
  password  String
  isDelete  Boolean   @default(false) @map("is_delete")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  bookings  Booking[]
  reviews   Review[]

  @@map("users")
}

model Travel {
  id          String    @unique @id @default(uuid())
  name        String
  price       Int
  imageUrl    String    @map("image_url")
  description String    @db.LongText
  location    String
  isDelete    Boolean   @default(false) @map("is_delete")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  bookings    Booking[]
  reviews     Review[]

  @@map("travels")
}

model Booking {
  id          String    @unique @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  travel      Travel    @relation(fields: [travelId], references: [id])
  userId      String    @map("user_id")
  travelId    String    @map("travel_id")
  bookingDate DateTime  @default(now()) @map("booking_date")
  isDelete    Boolean   @default(false) @map("is_delete")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("bookings")
}

model Review {
  id        String    @unique @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  travel    Travel    @relation(fields: [travelId], references: [id])
  userId    String    @map("user_id")
  travelId  String    @map("travel_id")
  rating    Int
  comment   String
  isDelete  Boolean   @default(false) @map("is_delete")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("reviews")
}

model Article {
  id          String   @unique @id @default(uuid())
  title       String
  description String   @db.LongText
  imageUrl    String   @map("image_url")
  author      String
  isDelete    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime @map("deleted_at")
}

enum Role {
  USER
  ADMIN
}
